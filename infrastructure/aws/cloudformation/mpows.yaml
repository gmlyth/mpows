Description: Creates resource stack for mpows.

Parameters:
  CapturePageLoads:
    Type: String
    Description: Do you want to capture page load events?
    Default: true
    AllowedValues:
      - true
      - false

  PageLoadHeaders:
    Description: Provide a comma-delimited list of headers to capture from the request.
    Type: String
    Default: 'user-agent,x-forwarded-for'

  CapturePageClicks:
    Type: String
    Description: Do you want to capture page click events?
    Default: true
    AllowedValues:
      - true
      - false

  LogMetricsToS3:
    Type: String
    Description: Log metrics to S3 as JSON by way of Kinesis Data Stream and Firehose?
    Default: true
    AllowedValues:
      - true
      - false
    
  DataStreamShardsForPageLoads:
    Type: Number
    Default: 1

  DataStreamShardsForPageClicks:
    Type: Number
    Default: 1

  LogMetricsToDynamoDB:
    Type: String
    Description: Log metrics to DynamoDB Tables?
    Default: true
    AllowedValues:
      - true
      - false    

Conditions:
  CreatePageLoadResources: !Equals [ !Ref CapturePageLoads, true ]
  CreatePageClickResources: !Equals [ !Ref CapturePageClicks, true ]
  CreateS3Resources: !Equals [ !Ref LogMetricsToS3, true ]
  CreateDynamoDBResources: !Equals [ !Ref LogMetricsToDynamoDB, true ]

  CreatePageLoadS3: !And
    - !Condition CreatePageLoadResources
    - !Condition CreateS3Resources

  CreatePageClickS3: !And
    - !Condition CreatePageClickResources
    - !Condition CreateS3Resources    

  CreatePageLoadsDynamoDB: !And
    - !Condition CreatePageLoadResources
    - !Condition CreateDynamoDBResources

  CreatePageClicksDynamoDB: !And
    - !Condition CreatePageClickResources
    - !Condition CreateDynamoDBResources       

Resources:
  S3BucketPageLoads:
    Type: 'AWS::S3::Bucket'
    Condition: CreatePageLoadS3 
    Properties:
      BucketName: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads"
      Tags:
        - Key: Vendor
          Value: mpows
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true

  S3BucketPageClicks:
    Type: 'AWS::S3::Bucket'
    Condition: CreatePageClickS3
    Properties:
      BucketName: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks"
      Tags:
        - Key: Vendor
          Value: mpows
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true

  KinesisDataStreamPageLoads:
    Type: AWS::Kinesis::Stream
    Condition: CreatePageLoadS3
    Properties: 
      Name: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads-stream"
      RetentionPeriodHours: 24
      ShardCount: !Ref DataStreamShardsForPageLoads
      Tags: 
        - Key: Vendor
          Value: mpows
        - Key: Name
          Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads-stream"

  KinesisDataStreamPageClicks:
    Type: AWS::Kinesis::Stream
    Condition: CreatePageClickS3
    Properties: 
      Name: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks-stream"
      RetentionPeriodHours: 24
      ShardCount: !Ref DataStreamShardsForPageClicks
      Tags: 
        - Key: Vendor
          Value: mpows
        - Key: Name
          Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks-stream"

  FirehoseDeliveryPageLoadsIAMRole:
    Type: AWS::IAM::Role
    Condition: CreatePageLoadS3   
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: firehose.amazonaws.com
          Action: sts:AssumeRole
      Tags:
        - Key: Vendor
          Value: mpows
        - Key: Name
          Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads-firehose-role"           
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:*"
                Resource: !GetAtt S3BucketPageLoads.Arn               

  KinesisSourcePageLoadsIAMRole:
    Type: AWS::IAM::Role
    Condition: CreatePageLoadS3    
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: firehose.amazonaws.com
          Action: sts:AssumeRole
      Tags:
        - Key: Vendor
          Value: mpows
        - Key: Name
          Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads-kinesis-role"            
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "kinesis:*"
                Resource: !GetAtt KinesisDataStreamPageLoads.Arn                           

  KinesisFirehosePageLoads:
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: CreatePageLoadS3
    Properties: 
      DeliveryStreamName: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads-firehose"
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration: 
        KinesisStreamARN: !GetAtt KinesisDataStreamPageLoads.Arn
        RoleARN: !GetAtt KinesisSourcePageLoadsIAMRole.Arn
      S3DestinationConfiguration: 
        BucketARN: !GetAtt S3BucketPageLoads.Arn
        RoleARN: !GetAtt FirehoseDeliveryPageLoadsIAMRole.Arn
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 5
      Tags: 
        - Key: Vendor
          Value: mpows
        - Key: Name
          Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads-firehose"         

  FirehoseDeliveryPageClicksIAMRole:
    Type: AWS::IAM::Role
    Condition: CreatePageClickS3   
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: firehose.amazonaws.com
          Action: sts:AssumeRole
      Tags:
        - Key: Vendor
          Value: mpows
        - Key: Name
          Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks-firehose-role"           
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:*"
                Resource: !GetAtt S3BucketPageClicks.Arn                

  KinesisSourcePageClicksIAMRole:
    Type: AWS::IAM::Role
    Condition: CreatePageClickS3    
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: firehose.amazonaws.com
          Action: sts:AssumeRole
      Tags:
        - Key: Vendor
          Value: mpows
        - Key: Name
          Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks-kinesis-role"            
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "kinesis:*"
                Resource:  !GetAtt KinesisDataStreamPageClicks.Arn  

  KinesisFirehosePageClicks:
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: CreatePageClickS3
    Properties: 
      DeliveryStreamName: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks-firehose"
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration: 
        KinesisStreamARN: !GetAtt KinesisDataStreamPageClicks.Arn
        RoleARN: !GetAtt KinesisSourcePageClicksIAMRole.Arn
      S3DestinationConfiguration: 
        BucketARN: !GetAtt S3BucketPageClicks.Arn
        RoleARN: !GetAtt FirehoseDeliveryPageClicksIAMRole.Arn
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 5
      Tags: 
        - Key: Vendor
          Value: mpows
        - Key: Name
          Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks-firehose"

  LambdaFunctionPageLoadsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "kinesis:*"
                #arnrewrite
                Resource: !GetAtt KinesisDataStreamPageLoads.Arn     
              - Effect: Allow
                Action: "logs:*"
                Resource: "*"   
              - Effect: Allow
                Action: "dynamodb:*"
                #arnrewrite
                Resource: !GetAtt PageLoadsDynamoDBTable.Arn  
      Tags:
          - Key: Vendor
            Value: mpows
          - Key: Name
            Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads-lambda-role"                                       

  LambdaFunctionPageLoadsUrl:
    Type: AWS::Lambda::Url
    Condition: CreatePageLoadResources    
    Properties: 
      AuthType: NONE
      TargetFunctionArn: !GetAtt LambdaFunctionPageLoads.Arn

  LambdaFunctionPageLoadsPermission:
    Type: AWS::Lambda::Permission
    Condition: CreatePageLoadResources    
    Properties: 
      Action: lambda:InvokeFunctionUrl 
      FunctionName: !Ref LambdaFunctionPageLoads
      FunctionUrlAuthType: NONE
      Principal: "*"  

  LambdaFunctionPageLoads:
    Type: AWS::Lambda::Function
    Condition: CreatePageLoadResources
    Properties: 
      FunctionName: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads-lambda"
      Role: !GetAtt LambdaFunctionPageLoadsRole.Arn
      Runtime: python3.9
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import datetime
          kinesis_client = boto3.client('kinesis')
          dynamodb_client = boto3.resource('dynamodb')
          log_to_s3 = True
          log_to_dynamodb = True          
          def handler(event, context): 
              print(event)
              
              headers_to_record = '${PageLoadHeaders}'
              headers_to_record_list = {}
              
              if headers_to_record != '':
                headers_to_record_list = headers_to_record.split(',')
              
              record = {'request_url': 'UNKNOWN',
              'timestamp': datetime.datetime.now().strftime("%m/%d/%Y %H:%M:%S")}
              
              for key_name in headers_to_record_list:
                record[key_name.replace('-','_')] = 'UNKNOWN'

              if 'queryStringParameters' in event:
                for key_name in event['queryStringParameters'].keys():
                  record[key_name] = event['queryStringParameters'][key_name];
              for key_name in headers_to_record_list:
                if 'headers' in event and key_name in event['headers']:
                  record[key_name.replace('-','_')] = event['headers'][key_name];      
              
              print(json.dumps(record));
              record_massaged = json.dumps(record) + "\n"
              
              if log_to_s3:              
                kinesis_client.put_record(
                StreamName='${KinesisDataStreamPageLoads}',
                Data=record_massaged.encode('utf-8'),
                PartitionKey='string'
                )
              
              if log_to_dynamodb:
                table = dynamodb_client.Table('${PageLoadsDynamoDBTable}')
                response = table.put_item(Item=record)

              body = record_massaged
              return {
                "statusCode": 200,
                "statusDescription": "200 OK",
                "isBase64Encoded": False,
                "headers": {
                  "Content-Type": "text/html"
                },
                "body": body
              }
              
      Tags:
          - Key: Vendor
            Value: mpows
          - Key: Name
            Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads-lambda"             

  LambdaFunctionPageClicksRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "kinesis:*"
                #arnrewrite
                Resource: !GetAtt KinesisDataStreamPageClicks.Arn     
              - Effect: Allow
                Action: "logs:*"
                Resource: "*"     
              - Effect: Allow
                Action: "dynamodb:*"
                #arnrewrite
                Resource: !GetAtt PageClicksDynamoDBTable.Arn 
      Tags:
          - Key: Vendor
            Value: mpows
          - Key: Name
            Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks-lambda-role"                 

  LambdaFunctionPageClicksUrl:
    Type: AWS::Lambda::Url
    Condition: CreatePageClickResources    
    Properties: 
      AuthType: NONE
      TargetFunctionArn: !GetAtt LambdaFunctionPageClicks.Arn

  LambdaFunctionPageClicksPermission:
    Type: AWS::Lambda::Permission
    Condition: CreatePageClickResources    
    Properties: 
      Action: lambda:InvokeFunctionUrl 
      FunctionName: !Ref LambdaFunctionPageClicks
      FunctionUrlAuthType: NONE
      Principal: "*"  

  LambdaFunctionPageClicks:
    Type: AWS::Lambda::Function
    Condition: CreatePageClickResources
    Properties: 
      FunctionName: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks-lambda"
      Role: !GetAtt LambdaFunctionPageClicksRole.Arn
      Runtime: python3.9
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import datetime
          kinesis_client = boto3.client('kinesis')
          dynamodb_client = boto3.resource('dynamodb')
          log_to_s3 = True
          log_to_dynamodb = True
          def handler(event, context): 
              print(event)
              
              headers_to_record = ''
              headers_to_record_list = {}
              
              if headers_to_record != '':
                headers_to_record_list = headers_to_record.split(',')
              
              record = {'request_url': 'UNKNOWN',
              'timestamp': datetime.datetime.now().strftime("%m/%d/%Y %H:%M:%S")}
              
              for key_name in headers_to_record_list:
                record[key_name.replace('-','_')] = 'UNKNOWN'

              if 'queryStringParameters' in event:
                for key_name in event['queryStringParameters'].keys():
                  record[key_name] = event['queryStringParameters'][key_name];
              for key_name in headers_to_record_list:
                if 'headers' in event and key_name in event['headers']:
                  record[key_name.replace('-','_')] = event['headers'][key_name];     
              
              print(json.dumps(record));
              record_massaged = json.dumps(record) + "\n"
              
              if log_to_s3:
                kinesis_client.put_record(
                StreamName='${KinesisDataStreamPageClicks}',
                Data=record_massaged.encode('utf-8'),
                PartitionKey='string'
                )
              
              if log_to_dynamodb:
                table = dynamodb_client.Table('${PageClicksDynamoDBTable}')
                response = table.put_item(Item=record)              

              body = record_massaged
              return {
                "statusCode": 200,
                "statusDescription": "200 OK",
                "isBase64Encoded": False,
                "headers": {
                  "Content-Type": "text/html"
                },
                "body": body
              }
              
      Tags:
          - Key: Vendor
            Value: mpows
          - Key: Name
            Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks-lambda"             

  PageLoadsDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Condition: CreatePageLoadsDynamoDB
    Properties: 
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads-dynamodb"   
      AttributeDefinitions: 
        - AttributeName: request_url
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema: 
        - AttributeName: request_url
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE           
      Tags:
          - Key: Vendor
            Value: mpows
          - Key: Name
            Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-loads-dynamodb"               

  PageClicksDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Condition: CreatePageClicksDynamoDB
    Properties: 
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks-dynamodb"   
      AttributeDefinitions: 
        - AttributeName: request_url
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema: 
        - AttributeName: request_url
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE           
      Tags:
          - Key: Vendor
            Value: mpows
          - Key: Name
            Value: !Sub "mpows-${AWS::AccountId}-${AWS::Region}-page-clicks-dynamodb"  

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Metric Configuration"
        Parameters:
          - CapturePageLoads
          - CapturePageClicks
          - PageLoadHeaders
      - Label:
          default: "S3 Configuration"
        Parameters:
          - LogMetricsToS3
          - DataStreamShardsForPageLoads
          - DataStreamShardsForPageClicks    
      - Label:
          default: "DynamoDB Configuration"
        Parameters:
          - LogMetricsToDynamoDB                    